FROM nvcr.io/nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04
# FROM nvcr.io/nvidia/cuda:11.6.2-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive

# Install system dependencies for convinient development inside container
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    curl \
    git \
    wget \
    vim \
    sudo \
    tar \
    unzip \
    openssh-server \
    python3-pip \
    build-essential \
    ninja-build \
    cmake \
    libopenblas-dev \
    ffmpeg \
    libsm6 \
    libxext6 \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev\
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libxml2-dev \
    libxmlsec1-dev \
    libffi-dev \
    liblzma-dev \
    && rm -rf /var/lib/apt/lists/*

# add user and his password
ENV USER=docker_opr
ARG UID=1000
ARG GID=1000
# default password
ARG PW=user

RUN useradd -m ${USER} --uid=${UID} && echo "${USER}:${PW}" | chpasswd && adduser ${USER} sudo
WORKDIR /home/${USER}

# create some directories for mounting volumes
RUN mkdir OpenPlaceRecognition && chown -R ${UID}:${GID} /home/${USER}
RUN mkdir Datasets && chown -R ${UID}:${GID} /home/${USER}

USER ${UID}:${GID}

ENV PATH="/home/${USER}/.local/bin:$PATH"
ENV PYENV_ROOT="/home/${USER}/.pyenv"
ENV PATH="$PYENV_ROOT/bin:$PATH"

# install pyenv to manage multiple python versions
RUN curl https://pyenv.run | bash \
    && echo 'export PYENV_ROOT="/home/$USER/.pyenv"' >> ~/.bashrc \
    && echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc \
    && echo 'eval "$(pyenv init -)"' >> ~/.bashrc \
    && echo 'export PYENV_ROOT="/home/$USER/.pyenv"' >> ~/.profile \
    && echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.profile \
    && echo 'eval "$(pyenv init -)"' >> ~/.profile

# install pythons (we have to explicitly source .profile to make pyenv work)
RUN ["/bin/bash", "-c", "source /home/$USER/.profile \
    && pyenv install 3.8 \
    && pyenv install 3.9 \
    && pyenv install 3.10 \
    && pyenv install 3.11 \
    && pyenv global 3.8" ]

# upgrade pip
RUN pip install --upgrade pip setuptools

# install pytorch 1.12.1 and torchvision
# it may take a long time, so it is better be done in separate 'layer'
RUN pip install \
    torch==1.12.1+cu113 \
    torchvision==0.13.1+cu113 \
    --extra-index-url https://download.pytorch.org/whl/cu113

# install MinkowskiEngine
RUN pip install ninja
ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0 8.6"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ENV CUDA_HOME=/usr/local/cuda-11.3
ENV MAX_JOBS=4
RUN pip install git+https://github.com/NVIDIA/MinkowskiEngine -v --no-deps \
                          --global-option="--force_cuda" \
                          --global-option="--blas=openblas"


# install other requirements from requirements.txt
COPY requirements.txt .
RUN pip install -r requirements.txt && \
    rm requirements.txt

# install dev requirements
COPY requirements-dev.txt .
RUN pip install -r requirements-dev.txt && \
    rm requirements-dev.txt

# install notebook requirements
COPY requirements-notebook.txt .
RUN pip install -r requirements-notebook.txt && \
    rm requirements-notebook.txt
